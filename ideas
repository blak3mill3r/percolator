can bits of percolator internals be refactored for simmplicity w/ definterpreter?
no, bad idea, because
definterpreter is for making macro-ey forms that build percolator forms
no real need for it in core I think
maybe there will be, but percolator internals now (defn interpret-expression-*) are fine


scopes generic is what matters most...
scopes built in to percolator:
statement body-decl expression
that's it I think


thoughts on the multimethod inf
which is to allow clojure literals
to be translated into java-literal-expression clojure expressions
and I want it to allow user to override somehow
defining for a given scope what to do with a java.lang.Double


so now it's a multimethod dispatching on the class of form
that's correctish...
but those need to be made generic and respect scopes hierarchy


right now my scopes hierarchy is a map of scope-name-symbol
to maps of first-forms to functions

that way the maps for each scope can be
key-> either one of
  '(quote foo)
  java.lang.String

THAT IS GOOD


maybe instead of interpret-in-scope being the multimethod
interpreter-for-scope-and-form could be
that sounds better

YAY it works
no multimethod at all, just doing it manually
in interpreter-for-scope-and-form


this is pretty good
now you have scope :expression working


One thing I should fix

the keys '(quote break)
that's dumb
because every single form which is seq?
has to look through that
instead it should look at the form and see if it's first is a list beginning with the literal symbol quote
and iff so, do the map lookup
FIX THAT
